{% extends "index" %}

{% requireLogin %}

{% block content %}

	<main class="c-edit">

		{% include "components/edit-menu.twig" %}

		{% macro errorList(errors) %}
			{% if errors %}
				{{ ul(errors, {class: 'errors'}) }}
			{% endif %}
		{% endmacro %}

		{% set user = user ?? currentUser %}

		{% set user_thumbnails = user.thumbnail.all() %}

		{% if user.hasErrors() %}
			<p>Unable to save your profile.</p>
		{% endif %}

		<div class="c-edit__formWrapper">
			<form method="post" accept-charset="UTF-8" enctype="multipart/form-data" class="c-edit__form">
				<h2>public page</h2>
				<p>Any changes you make here will appear on <a href="/{{ user.fullName|replace({' ': "-"}) }}">your dedicated page</a></p>

				{{ csrfInput() }}
				{{ actionInput('users/save-user') }}
				{{ hiddenInput('userId', user.id) }}

				{# Featured Image #}
				<h3>basic info</h3>
				<label class="c-edit__formLabel">
					featured image
					<span class="c-edit__featuredImageContainer">
						<span class="c-edit__featuredImageOverlay">
							<ion-icon name="pencil"></ion-icon>
						</span>
						{{ input('file', 'fields[thumbnail][]', null, { id: 'thumbnail', accept: 'image/png,image/jpeg', }) }}
						{% if user_thumbnails and user_thumbnails[0] %}
							<img src="{{ user_thumbnails[0].url }}" alt="User">
						{% else %}
							<img src="" alt="User">
						{% endif %}
						<p>
							<ion-icon name="cloud-upload"></ion-icon><br>
							Drag a file here or
							<u>Browse</u>
						</p>
					</span>
					<div class="c-edit__featuredImageList">
					</div>
				</label>

				{# Company Name #}
				<label for="full-name" class="c-edit__formLabel">
					company name
					{{ input('text', 'fullName', user.fullName, { id: 'full-name', autocomplete: 'name', }) }}
				</label>

				{# Map Information #}
				<span class="c-edit__formInputRow">
					<label for="fields[venue]" class="c-edit__formLabel">
						venue
						{{ input('text', 'fields[venue]', user.venue, { id: 'mapAddress' }) }}
					</label>
					<label for="fields[mapAddress]" class="c-edit__formLabel">
						map address
						{{ input('text', 'fields[mapAddress]', user.mapAddress, { id: 'mapAddress' }) }}
					</label>
					<label for="mapPostalCode" class="c-edit__formLabel">
						map postal code
						{{ input('text', 'fields[mapPostalCode]', user.mapPostalCode, { id: 'mapPostalCode', autocomplete: 'off' }) }}
					</label>
				</span>

				<h3>about the company</h3>
				<label for="fields[largeTextField]" class="c-edit__formLabel">
					<span class="c-edit__formLabelRow">
						<p>About</p>
						<p id="bioMaxCharacters">max. 500 characters</p>
					</span>
					{{ tag('textarea', { text: user.largeTextField, id: 'profileText', name: 'fields[largeTextField]', rows: 10, }) }}
				</label>

				<h3 class="c-edit__formHeader">visiting hours</h3>
				<ul class="c-edit__formDateTable">
					{% for date in event.datetable %}
						<li>
							{{ date["col1"]|date("l") }}
							{% include "_partials/edit-time-selector.twig" with { row: loop.index - 1} %}
						</li>
					{% endfor %}
				</ul>

				<h3 class="c-edit__formHeader">contact</h3>
				<span class="c-edit__formInputRow">
					<label for="fields[phoneNumber]" class="c-edit__formLabel">
						phone number
						{{ input('text', 'fields[phoneNumber]', user.phoneNumber, { id: 'phoneNumber' }) }}
					</label>
					<label for="email" class="c-edit__formLabel">
						email address
						{{ input('text', 'email', user.email, { id: 'email' }) }}
					</label>
				</span>
				<span class="c-edit__formInputRow">
					<label for="fields[instagram]" class="c-edit__formLabel">
						instagram
						{{ input('text', 'fields[instagram]', user.instagram, { id: 'instagram' }) }}
					</label>
					<label for="fields[twitter]" class="c-edit__formLabel">
						twitter
						{{ input('text', 'fields[twitter]', user.twitter, { id: 'twitter' }) }}
					</label>
				</span>
				<span class="c-edit__formInputRow">
					<label for="fields[facebook]" class="c-edit__formLabel">
						facebook
						{{ input('text', 'fields[facebook]', user.facebook, { id: 'facebook' }) }}
					</label>
					<label for="fields[linkedin]" class="c-edit__formLabel">
						linkedin
						{{ input('text', 'fields[linkedin]', user.linkedin, { id: 'linkedin' }) }}
					</label>
				</span>
				<label for="fields[website]" class="c-edit__formLabel">
					website
					{{ input('text', 'fields[website]', user.website, { id: 'website' }) }}
				</label>


				<span class="c-edit__formInputRow options">
					<a href="/{{ user.fullName|replace({' ': "-"}) }}">View page</a>
					<button type="submit" class="c-edit__formSubmit disabled" disabled>Save changes</button>
				</span>
			</form>
		</div>


	</main>

{% endblock %}

{% block javascripts %}
	<script>
	const submit = document.querySelector("button[type=submit]")
	const featuredImageInput = document.querySelector("input[type='file']");
	const featuredImage = document.querySelector(".c-edit__featuredImageContainer img");

featuredImageInput.addEventListener("change", (e) => {
const file = e.target.files[0]
featuredImage.src = URL.createObjectURL(file)
})

const setCharacterCount = (counter, character_count, max_count, suffix) => {
if (character_count.length > max_count) {
	counter.innerHTML = `<span class="red">${character_count.length} / ${suffix}</span>`;
	submit.disabled = true;
	submit.classList.add("disabled")
} else {
	counter.innerHTML = `${character_count.length} / ${suffix}`;
	submit.disabled = false;
	submit.classList.remove("disabled")
}

}

const bioInput = document.querySelector("#profileText")
const bioMaxCharacters = document.querySelector("#bioMaxCharacters");

bioInput.addEventListener("keyup", (e) => {
setCharacterCount(bioMaxCharacters, bioInput.value, 500, "500 characters")
})
setCharacterCount(bioMaxCharacters, bioInput.value, 500, "500 characters")

const validateFormField = (labelSelector, errorMessage, condition, checkCondition = undefined) => {
if (typeof checkCondition !== "undefined" && !checkCondition) 
return;


const label = document.querySelector(labelSelector);
const error = document.querySelector (`${labelSelector} .c-edit__formError`)

if (condition && error) 
error.remove();


// If both the condition is not fullfilled and there is no current error message then create a new error message.
if (!condition && ! error) {
let error = document.createElement("span");
error.className = "c-edit__formError";
error.innerHTML = errorMessage;

if (label) 
label.appendChild(error)

return false;
}

return true;
}

const postalCode = document.querySelector("#mapPostalCode")
const postalRegex = /(\d{4})([ ])([A-Z]{2})/;

postalCode.addEventListener("input", () => {
validateFormField(".c-edit__formLabel[for='mapPostalCode']", "Valid Dutch postal code is required", postalRegex.test(postalCode.value) && postalCode.value.length === 7, postalCode.value.length > 0)

postalRegex.test(postalCode.value)

if (postalRegex.test(postalCode.value) && postalCode.value.length === 7) {
submit.disabled = false;
submit.classList.remove("disabled")
} else {
submit.disabled = true
submit.classList.add("disabled")
}
})

validateFormField(".c-edit__formLabel[for='mapPostalCode']", "Valid Dutch postal code is required", postalRegex.test(postalCode.value) && postalCode.value.length === 7, postalCode.value.length > 0)
if (postalRegex.test(postalCode.value) && postalCode.value.length === 7) {
submit.disabled = false;
submit.classList.remove("disabled")
} else {
submit.disabled = true
submit.classList.add("disabled")
}

	</script>
{% endblock %}
